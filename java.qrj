--------------------------------------------------------------------------------------------------------------------------------------------
/*JVM GC [JVM,GC]*/
--JVM 分类
HotSpot   --Sun公司标准JVM,因Sun被Oracle收购,HotSpot就变成Oracle公司的了
IBMJVM   --IBM公司产品
JRockit   --BEA公司产品,用在WebLogic中间件上,因BEA被Oracle收购,WebLogic和JRockit都变成Oralce公司的了

--HotSpot GC
-XX:NewSize=200M   --设定年轻代的大小(字节),此为最小值
-XX:NewRatio=6   --设定年老代和年轻代之间的大小比率,意味着tenured和young的比值6:1,默认值为2,年老代设置过小会导致full gc频繁
-XX:MaxTenuringThreshold=1   --设置熬过年轻代多少次收集后移入老年区,默认为0,熬过第一次GC就转入
-XX:SurvivorRatio=n   --年轻代中Eden区与两个Survivor区的比值
-XX:+UseParallelOldGC   --配置年老代垃圾收集方式为并行收集,对于多cpu系统可进行并行收集,从而降低停顿时间,提高了吞吐量
-XX:+DisableExplicitGC   --禁止调用System.gc(),防止应用程序触发full gc,但jvm的gc仍然有效
-XX:+UseParallelGC   --并行
-XX:+UseSerialGC   --串行
-XX:+UseConcMarkSweepGC   --并发标记

--IBMJVM GC
-Xgcpolicy:gencon   --以不同方式处理短期存活的对象和长期存活的对象。采用这种策略时,具有许多短期存活对象的应用程序会表现出更短的停顿时间,
                    --同时仍然产生很好的吞吐量。(推荐)
-Xgcpolicy:subpool   --采用与默认策略相似的算法,但是采用一种比较适合多处理器计算机的分配策略。建议对于有16个或更多处理器的SMP计算机使用这种策略。
                     --这种策略只能在IBM pSeries®和zSeries®平台上使用。需要扩展到大型计算机上的应用程序可以从这种策略中受益。
-Xgcpolicy:optthruput   --WAS默认策略,对于吞吐量比短暂的GC停顿更重要的应用程序,通常使用这种策略。每当进行垃圾收集时,应用程序都会停顿。
-Xgcpolicy:optavgpause   --通过并发地执行一部分垃圾收集,在高吞吐量和短GC停顿之间进行折中。应用程序停顿的时间更短。
-Xmn200m   --直接指定jvm中年轻代的大小为200m

--JRockit GC
暂无
--------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------------------
/*Spring DATA JPA [JPA,Spring]*/
在创建查询时,我们通过在方法名中使用属性名称来表达,比如'findByUserAddressZip()'框架在解析该方法时,首先剔除'findBy',然后对剩下的属性进行解析,
详细规则如下(此处假设该方法针对的域对象为'AccountInfo'类型):
  先判断'userAddressZip'(根据POJO规范,首字母变为小写,下同)是否为'AccountInfo'的一个属性,如果是,则表示根据该属性进行查询,如果没有该属性,继续
  第二步;从右往左截取第一个大写字母开头的字符串,此处为'Zip',然后检查剩下的字符串是否为'AccountInfo'的一个属性,如果是,则表示根据该属性进行查
  询,如果没有该属性,则重复第二步,继续从右往左截取;最后假设'user'为'AccountInfo'的一个属性;接着处理剩下部分'AddressZip',先判断'user'所对应的
  类型是否有'addressZip'属性,如果有,则表示该方法最终是根据'AccountInfo.user.addressZip'的取值进行查询;否则继续按照步骤2的规则从右往左截取,
  最终表示根据'AccountInfo.user.address.zip'的值进行查询。
在查询时,通常需要同时根据多个属性进行查询,且查询的条件也格式各样(大于某个值/在某个范围等等),Spring Data JPA为此提供了一些表达条件查询的关键
字,大致如下:
  And   --等价于SQL中的and关键字,比如 findByUsernameAndPassword(String user, String pwd)
  Or   --等价于SQL中的or关键字,比如 findByUsernameOrAddress(String user, String addr)
  Between   --等价于SQL中的between关键字,比如 findBySalaryBetween(int max, int min)
  LessThan   --等价于SQL中的'<',比如 findBySalaryLessThan(int max)
  GreaterThan   --等价于SQL中的''>',比如 findBySalaryGreaterThan(int min)
  IsNull   --等价于SQL中的'is null',比如 findByUsernameIsNull()
  IsNotNull   --等价于SQL中的'is not null',比如 findByUsernameIsNotNull()
  NotNull   --与IsNotNull等价
  Like   --等价于SQL中的'like',比如 findByUsernameLike(String user)
  NotLike   --等价于SQL中的'not like',比如 findByUsernameNotLike(String user)
  OrderBy   --等价于SQL中的'order by',比如 findByUsernameOrderBySalaryAsc(String user)
  Not   --等价于SQL中的'!=',比如 findByUsernameNot(String user)
  In   --等价于SQL中的'in',比如 findByUsernameIn(Collection<String> userList) 方法的参数可以是Collection类型,也可以是数组或者不定长参数
  NotIn   --等价于SQL中的'not in',比如 findByUsernameNotIn(Collection<String> userList) 方法的参数可以是Collection类型,也可以是数组或者不定长参数
--------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------------------
/*active commands [AC]*/
keytool -genkey -alias tomcat -keypass 123456 -keyalg RSA -keysize 1024 -validity 365 -keystore D:/tomcat.keystore -storepass 123456

--install jenkins
wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo
rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key
yum -y install jenkins

--install maven
wget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo
yum -y install apache-maven
--------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------------------
/*active points [AP]*/
--java environment values
JAVA_HOME: jdk_path
PATH: add the string ";%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin"
CLASSPATH: ".;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar"

--maven environment value
PATH：add the string "maven_home + bin"

--maven setting
<mirror>
  <id>alimaven</id>
  <name>aliyun maven</name>
  <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
  <mirrorOf>central</mirrorOf>        
</mirror>   --aliyun 镜像配置
<localRepository>/path/to/local/repo</localRepository>   --本地仓库路径配置

--全局maven pom配置(after 3.x.x edition)
$maven_home/lib/maven-model-builder-${version}.jar/org/apache/maven/model/pom-4.0.0.xml
--------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------------------
/*log4j configuration [log4j]*/
%m   --输出代码中指定的消息
%p   --输出优先级,即DEBUG、INFO、WARN、ERROR、FATAL 
%r   --输出自应用启动到输出该log信息耗费的毫秒数 
%c   --输出所属的类目,通常就是所在类的全名 
%t   --输出产生该日志事件的线程名 
%n   --输出一个回车换行符，Windows平台为"/r/n",Unix平台为"/n"
%d   --输出日志时间点的日期或时间,默认格式为ISO8601,也可以在其后指定格式,比如:%d{yyy MMM dd HH:mm:ss}
%l   --输出日志事件的发生位置,包括类目名、发生的线程,以及在代码中的行数
--------------------------------------------------------------------------------------------------------------------------------------------
